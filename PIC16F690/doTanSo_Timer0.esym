D G "__PCM__" 0 107 ""5.015""
D G "__DEVICE__" 0 107 "887"
D G "__DATE__" 0 107 ""14-Jul-19""
D G "__TIME__" 0 107 ""23:54:30"" "Standard Header file for the PIC16F690 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
v L "value" 1 37 "int8" `54 
f B "set_tris_a" 1 37 "void(int8 value)" `53 
v L "value" 1 38 "int8" `56 
f B "set_tris_b" 1 38 "void(int8 value)" `55 
v L "value" 1 39 "int8" `58 
f B "set_tris_c" 1 39 "void(int8 value)" `57 
f B "get_tris_a" 1 40 "int8(int8 value)" `59 
f B "get_tris_b" 1 41 "int8()" `60 
f B "get_tris_c" 1 42 "int8(int8 value)" `61 
v L "value" 1 43 "int8" `63 
f B "output_a" 1 43 "void(int8 value)" `62 
v L "value" 1 44 "int8" `65 
f B "output_b" 1 44 "void(int8 value)" `64 
v L "value" 1 45 "int8" `67 
f B "output_c" 1 45 "void(int8 value)" `66 
f B "input_a" 1 46 "int8(int8 value)" `68 
f B "input_b" 1 47 "int8()" `69 
f B "input_c" 1 48 "int8(int8 value)" `70 
f B "input_change_a" 1 49 "int8()" `71 
f B "input_change_b" 1 50 "int8(int8 value)" `72 
f B "input_change_c" 1 51 "int8()" `73 
v L "pin" 1 52 "int16" `75 
f B "input" 1 52 "int8(int16 pin)" `74 
v L "pin" 1 53 "int16" `77 
f B "input_state" 1 53 "int8(int16 pin)" `76 
v L "pin" 1 54 "int16" `79 
f B "output_low" 1 54 "void(int16 pin)" `78 
v L "pin" 1 55 "int16" `81 
f B "output_high" 1 55 "void(int16 pin)" `80 
v L "pin" 1 56 "int16" `83 
f B "output_toggle" 1 56 "void(int16 pin)" `82 
v L "pin" 1 57 "int16" `85 
v L "level" 1 57 "int8" `86 
f B "output_bit" 1 57 "void(int16 pin,int8 level)" `84 
v L "pin" 1 58 "int16" `88 
f B "output_float" 1 58 "void(int16 pin,int16 pin)" `87 
v L "pin" 1 59 "int16" `90 
f B "output_drive" 1 59 "void(int16 pin,int16 pin)" `89  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 63 "40"
d G "PIN_A1" 1 64 "41"
d G "PIN_A2" 1 65 "42"
d G "PIN_A3" 1 66 "43"
d G "PIN_A4" 1 67 "44"
d G "PIN_A5" 1 68 "45"
d G "PIN_B4" 1 70 "52"
d G "PIN_B5" 1 71 "53"
d G "PIN_B6" 1 72 "54"
d G "PIN_B7" 1 73 "55"
d G "PIN_C0" 1 75 "56"
d G "PIN_C1" 1 76 "57"
d G "PIN_C2" 1 77 "58"
d G "PIN_C3" 1 78 "59"
d G "PIN_C4" 1 79 "60"
d G "PIN_C5" 1 80 "61"
d G "PIN_C6" 1 81 "62"
d G "PIN_C7" 1 82 "63"
d G "FALSE" 1 85 "0"
d G "TRUE" 1 86 "1"
d G "BYTE" 1 88 "int8"
d G "BOOLEAN" 1 89 "int1"
d G "getc" 1 91 "getch"
d G "fgetc" 1 92 "getch"
d G "getchar" 1 93 "getch"
d G "putc" 1 94 "putchar"
d G "fputc" 1 95 "putchar"
d G "fgets" 1 96 "gets"
d G "fputs" 1 97 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f B "restart_cause" 1 102 "int8()" `91 
f B "reset_cpu" 1 103 "void(int16 PIN_C3)" `92 
f B "sleep" 1 104 "void()" `93  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 106 "3"
d G "WDT_TIMEOUT" 1 107 "11"
d G "MCLR_FROM_SLEEP" 1 108 "19"
d G "MCLR_FROM_RUN" 1 109 "27"
d G "NORMAL_POWER_UP" 1 110 "25"
d G "BROWNOUT_RESTART" 1 111 "26"
c L "sleep" 1 3 5 "FUNCTION"
v L "mode" 1 118 "int8" `95 
f B "setup_timer_0" 1 118 "void(int8 mode)" `94 
v L "value" 1 119 "int8" `97 
f B "set_timer0" 1 119 "void(int8 value)" `96 
f B "get_timer0" 1 120 "int8(int16 PIN_C3,int8 PIN_C4)" `98 
v L "mode" 1 121 "int8" `100 
v L "prescaler" 1 121 "int8" `101 
f B "setup_counters" 1 121 "void(int8 mode,int8 prescaler,int16 PIN_C3)" `99 
v L "value" 1 122 "int8" `103 
f B "set_rtcc" 1 122 "void(int8 value,int16 PIN_C3)" `102 
f B "get_rtcc" 1 123 "int8()" `104  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 125 "0"
d G "T0_EXT_L_TO_H" 1 126 "32"
d G "T0_EXT_H_TO_L" 1 127 "48"
d G "T0_DIV_1" 1 129 "8"
d G "T0_DIV_2" 1 130 "0"
d G "T0_DIV_4" 1 131 "1"
d G "T0_DIV_8" 1 132 "2"
d G "T0_DIV_16" 1 133 "3"
d G "T0_DIV_32" 1 134 "4"
d G "T0_DIV_64" 1 135 "5"
d G "T0_DIV_128" 1 136 "6"
d G "T0_DIV_256" 1 137 "7"
d G "T0_8_BIT" 1 140 "0"
d G "RTCC_INTERNAL" 1 142 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 143 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 144 "48"
d G "RTCC_DIV_1" 1 145 "8"
d G "RTCC_DIV_2" 1 146 "0"
d G "RTCC_DIV_4" 1 147 "1"
d G "RTCC_DIV_8" 1 148 "2"
d G "RTCC_DIV_16" 1 149 "3"
d G "RTCC_DIV_32" 1 150 "4"
d G "RTCC_DIV_64" 1 151 "5"
d G "RTCC_DIV_128" 1 152 "6"
d G "RTCC_DIV_256" 1 153 "7"
d G "RTCC_8_BIT" 1 154 "0"
c L "get_rtcc" 1 3 8 "FUNCTION"
v L "mode" 1 165 "int16" `106 
f B "setup_wdt" 1 165 "void(int16 mode)" `105 
f B "restart_wdt" 1 166 "void()" `107  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 169 "8"
d G "WDT_36MS" 1 170 "9"
d G "WDT_72MS" 1 171 "10"
d G "WDT_144MS" 1 172 "11"
d G "WDT_288MS" 1 173 "12"
d G "WDT_576MS" 1 174 "13"
d G "WDT_1152MS" 1 175 "14"
d G "WDT_2304MS" 1 176 "15"
d G "WDT_ON" 1 181 "0x4000"
d G "WDT_OFF" 1 182 "0"
d G "WDT_DIV_16" 1 183 "0x100"
d G "WDT_DIV_8" 1 184 "0x300"
d G "WDT_DIV_4" 1 185 "0x500"
d G "WDT_DIV_2" 1 186 "0x700"
d G "WDT_TIMES_1" 1 187 "0x900" "Default"
d G "WDT_TIMES_2" 1 188 "0xB00"
d G "WDT_TIMES_4" 1 189 "0xD00"
d G "WDT_TIMES_8" 1 190 "0xF00"
d G "WDT_TIMES_16" 1 191 "0x1100"
d G "WDT_TIMES_32" 1 192 "0x1300"
d G "WDT_TIMES_64" 1 193 "0x1500"
d G "WDT_TIMES_128" 1 194 "0x1700"
c L "restart_wdt" 1 3 3 "FUNCTION"
v L "mode" 1 199 "int16" `109 
f B "setup_timer_1" 1 199 "void(int16 mode)" `108 
f B "get_timer1" 1 200 "int16(int8 PIN_C2)" `110 
v L "value" 1 201 "int16" `112 
f B "set_timer1" 1 201 "void(int16 value)" `111  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 204 "0"
d G "T1_INTERNAL" 1 205 "5"
d G "T1_EXTERNAL" 1 206 "7"
d G "T1_EXTERNAL_SYNC" 1 207 "3"
d G "T1_CLK_OUT" 1 209 "8"
d G "T1_DIV_BY_1" 1 211 "0"
d G "T1_DIV_BY_2" 1 212 "0x10"
d G "T1_DIV_BY_4" 1 213 "0x20"
d G "T1_DIV_BY_8" 1 214 "0x30"
d G "T1_GATE" 1 216 "0x40"
d G "T1_GATE_INVERTED" 1 217 "0xC0"
c L "set_timer1" 1 3 3 "FUNCTION"
v L "mode" 1 222 "int8" `114 
v L "period" 1 222 "int8" `115 
v L "postscale" 1 222 "int8" `116 
f B "setup_timer_2" 1 222 "void(int8 mode,int8 period,int8 postscale,int8 PIN_C2)" `113 
f B "get_timer2" 1 223 "int8()" `117 
v L "value" 1 224 "int8" `119 
f B "set_timer2" 1 224 "void(int8 value,int16 WDT_576MS)" `118  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 226 "0"
d G "T2_DIV_BY_1" 1 227 "4"
d G "T2_DIV_BY_4" 1 228 "5"
d G "T2_DIV_BY_16" 1 229 "6"
c L "set_timer2" 1 3 4 "FUNCTION"
v L "mode" 1 235 "int32" `121 
f B "setup_ccp1" 1 235 "void(int32 mode)" `120 
v L "mode" 1 236 "int32" `123 
v L "pwm" 1 236 "int8" `124 
f B "setup_ccp1" 1 236 "void(int32 mode,int8 pwm)" `122 
v L "value" 1 237 "int16" `126 
f B "set_pwm1_duty" 1 237 "void(int16 value)" `125  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 239 "0"
d G "CCP_CAPTURE_FE" 1 240 "4"
d G "CCP_CAPTURE_RE" 1 241 "5"
d G "CCP_CAPTURE_DIV_4" 1 242 "6"
d G "CCP_CAPTURE_DIV_16" 1 243 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 244 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 245 "9"
d G "CCP_COMPARE_INT" 1 246 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 1 247 "0xB"
d G "CCP_PWM" 1 248 "0xC"
d G "CCP_PWM_PLUS_1" 1 249 "0x1c"
d G "CCP_PWM_PLUS_2" 1 250 "0x2c"
d G "CCP_PWM_PLUS_3" 1 251 "0x3c"
d G "CCP_PWM_H_H" 1 256 "0x0c"
d G "CCP_PWM_H_L" 1 257 "0x0d"
d G "CCP_PWM_L_H" 1 258 "0x0e"
d G "CCP_PWM_L_L" 1 259 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 261 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 262 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 263 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 265 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 266 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 267 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 268 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 269 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 270 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 271 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 273 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 274 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 275 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 277 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 278 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 279 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 281 "0x80000000"
d G "CCP_PULSE_STEERING_A" 1 283 "0x01000000"
d G "CCP_PULSE_STEERING_B" 1 284 "0x02000000"
d G "CCP_PULSE_STEERING_C" 1 285 "0x04000000"
d G "CCP_PULSE_STEERING_D" 1 286 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 1 287 "0x10000000"
c L "set_pwm1_duty" 1 3 3 "FUNCTION"
v L "mode" 1 292 "int32" `131 
f B "setup_spi" 1 292 "void(int32 mode)" `130 
v L "value" 1 293 "int8" `133 
f B "spi_write" 1 293 "void(int8 value)" `132 
f B "spi_read" 1 294 "int8(int32 WDT_576MS)" `134 
v L "value" 1 295 "int8" `136 
f G "spi_read" 1 295 "int8(int8 value,int32 WDT_576MS,int8 CCP_SHUTDOWN_AC_F)" `135 
f B "spi_data_in" 1 296 "int8(int8 CCP_SHUTDOWN_AC_F)" `137  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 298 "0x00"
d G "SPI_MASTER" 1 299 "0x20"
d G "SPI_SLAVE" 1 300 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 301 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 302 "0x00"
d G "SPI_CLK_DIV_4" 1 303 "0x00"
d G "SPI_CLK_DIV_16" 1 304 "0x01"
d G "SPI_CLK_DIV_64" 1 305 "0x02"
d G "SPI_CLK_T2" 1 306 "0x03"
d G "SPI_SS_DISABLED" 1 307 "0x01"
d G "SPI_XMIT_L_TO_H" 1 309 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 310 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 312 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 313 "0x8000"
d G "SPI_L_TO_H" 1 316 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 317 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 3 2 "FUNCTION"
v L "baud" 1 321 "int32" `139 
f B "setup_uart" 1 321 "void(int32 baud,int16 PIN_C2)" `138 
v L "baud" 1 322 "int32" `141 
v L "stream" 1 322 "int8" `142 
f G "setup_uart" 1 322 "void(int32 baud,int8 stream)" `140 
v L "baud" 1 323 "int32" `144 
v L "stream" 1 323 "int8" `145 
v L "clock" 1 323 "int32" `146 
f G "setup_uart" 1 323 "void(int32 baud,int8 stream,int32 clock,int32 WDT_576MS,int8 CCP_SHUTDOWN_AC_F)" `143 
v L "baud" 1 324 "int32" `148 
f B "set_uart_speed" 1 324 "void(int32 baud)" `147 
v L "baud" 1 325 "int32" `150 
v L "stream" 1 325 "int8" `151 
f B "set_uart_speed" 1 325 "void(int32 baud,int8 stream)" `149 
v L "baud" 1 326 "int32" `153 
v L "stream" 1 326 "int8" `154 
v L "clock" 1 326 "int32" `155 
f G "set_uart_speed" 1 326 "void(int32 baud,int8 stream,int32 clock)" `152  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 330 "2"
d G "UART_DATA" 1 331 "4"
d G "UART_AUTODETECT" 1 332 "8"
d G "UART_AUTODETECT_NOWAIT" 1 333 "9"
d G "UART_WAKEUP_ON_RDA" 1 334 "10"
d G "UART_SEND_BREAK" 1 335 "13"
c L "set_uart_speed" 1 3 3 "FUNCTION"
v L "mode" 1 339 "int32" `157 
f B "setup_comparator" 1 339 "void(int32 mode)" `156  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 342 "0x00"
d G "CP1_A1_A0" 1 344 "0x80"
d G "CP1_C1_A0" 1 345 "0x81"
d G "CP1_C2_A0" 1 346 "0x82"
d G "CP1_C3_A0" 1 347 "0x83"
d G "CP1_A1_VR" 1 348 "0x84"
d G "CP1_C1_VR" 1 349 "0x85"
d G "CP1_C2_VR" 1 350 "0x86"
d G "CP1_C3_VR" 1 351 "0x87"
d G "CP1_OUT_ON_A2" 1 352 "0x20"
d G "CP1_INVERT" 1 353 "0x10"
d G "CP2_A1_C0" 1 355 "0x8000"
d G "CP2_C1_C0" 1 356 "0x8100"
d G "CP2_C2_C0" 1 357 "0x8200"
d G "CP2_C3_C0" 1 358 "0x8300"
d G "CP2_A1_VR" 1 359 "0x8400"
d G "CP2_C1_VR" 1 360 "0x8500"
d G "CP2_C2_VR" 1 361 "0x8600"
d G "CP2_C3_VR" 1 362 "0x8700"
d G "CP2_OUT_ON_C4" 1 363 "0x2000"
d G "CP2_INVERT" 1 364 "0x1000"
d G "COMP_C1_LATCHED" 1 366 "0x300000"
d G "COMP_T1_SYNC" 1 367 "0x1000000"
d G "COMP_T1_GATE" 1 368 "0x2000000"
c L "setup_comparator" 1 3 2 "FUNCTION"
v L "mode" 1 375 "int8" `161 
f B "setup_vref" 1 375 "void(int8 mode)" `160  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 377 "0x20"
d G "VREF_HIGH" 1 378 "0x00"
d G "VREF_6th" 1 380 "0x10" "Turn on .6V ref"
d G "VREF_COMP1" 1 381 "0x80"
d G "VREF_COMP2" 1 382 "0x40"
c L "setup_vref" 1 3 2 "FUNCTION"
v L "mode" 1 387 "int8" `163 
f B "setup_oscillator" 1 387 "int8(int8 mode)" `162  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 389 "1"
d G "OSC_125KHZ" 1 390 "0x11"
d G "OSC_250KHZ" 1 391 "0x21"
d G "OSC_500KHZ" 1 392 "0x31"
d G "OSC_1MHZ" 1 393 "0x41"
d G "OSC_2MHZ" 1 394 "0x51"
d G "OSC_4MHZ" 1 395 "0x61"
d G "OSC_8MHZ" 1 396 "0x71"
d G "OSC_INTRC" 1 397 "1"
d G "OSC_NORMAL" 1 398 "0"
d G "OSC_STATE_STABLE" 1 400 "4"
d G "OSC_31KHZ_STABLE" 1 401 "2"
c L "setup_oscillator" 1 3 4 "FUNCTION"
v L "mode" 1 409 "int16" `165 
f B "setup_adc" 1 409 "void(int16 mode,int8 VREF_HIGH)" `164 
f B "read_adc" 1 410 "int8()" `166 
v L "mode" 1 411 "int8" `168 
f G "read_adc" 1 411 "int8(int8 mode,int8 VREF_HIGH,int32 VREF_6th)" `167 
f G "read_adc" 1 412 "int16(int32 VREF_6th)" `169 
v L "mode" 1 413 "int8" `171 
f G "read_adc" 1 413 "int16(int8 mode,int32 VREF_LOW)" `170 
f B "adc_done" 1 414 "int8()" `172  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 416 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 417 "0x100"
d G "ADC_CLOCK_DIV_4" 1 418 "0x40"
d G "ADC_CLOCK_DIV_8" 1 419 "0x10"
d G "ADC_CLOCK_DIV_32" 1 420 "0x20"
d G "ADC_CLOCK_DIV_16" 1 421 "0x50"
d G "ADC_CLOCK_DIV_64" 1 422 "0x60"
d G "ADC_CLOCK_INTERNAL" 1 423 "0x30" "Internal 2-6us"
c L "adc_done" 1 3 1 "FUNCTION"
v L "pins" 1 426 "int32" `174 
f B "setup_adc_ports" 1 426 "void(int32 pins,int8 VREF_HIGH)" `173 
v L "pins" 1 427 "int32" `176 
v L "reference" 1 427 "int32" `177 
f G "setup_adc_ports" 1 427 "void(int32 pins,int32 reference,int8 VREF_HIGH,int32 VREF_6th)" `175 
v L "channel" 1 428 "int8" `179 
f B "set_adc_channel" 1 428 "void(int8 channel)" `178  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 1 432 "1" "| A0"
d G "sAN1" 1 433 "2" "| A1"
d G "sAN2" 1 434 "4" "| A2"
d G "sAN3" 1 435 "8" "| A4"
d G "sAN4" 1 436 "16" "| C0"
d G "sAN5" 1 437 "32" "| C1"
d G "sAN6" 1 438 "64" "| C2"
d G "sAN7" 1 439 "128" "| C3"
d G "sAN8" 1 440 "0x10000" "| C6"
d G "sAN9" 1 441 "0x20000" "| C7"
d G "sAN10" 1 442 "0x40000" "| B4"
d G "sAN11" 1 443 "0x80000" "| B5"
d G "NO_ANALOGS" 1 444 "0" "None"
d G "ALL_ANALOG" 1 445 "0xF00FF" "A0 A1 A2 A4 C0 C1 C2 C3 C6 C7 B4 B5"
d G "VSS_VDD" 1 448 "0x0000" "| Range 0-Vdd"
d G "VSS_VREF" 1 449 "0x4000" "| Range 0-Vref"
d G "ADC_START_AND_READ" 1 452 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 453 "1"
d G "ADC_READ_ONLY" 1 454 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
v L "x" 1 460 "sint8" `181 
f B "abs" 1 460 "sint8(sint8 x)" `180 
v L "x" 1 461 "sint16" `183 
f G "abs" 1 461 "sint16(sint16 x)" `182 
v L "x" 1 462 "sint32" `185 
f B "abs" 1 462 "sint32(sint32 x)" `184 
v L "x" 1 463 "float" `187 
f B "abs" 1 463 "float(float x)" `186 
v L "??65535" 1 464 "int8" `189 
v L "??65535" 1 464 "int8" `190 
f B "_mul" 1 464 "int16(int8 ,int8 )" `188 
v L "??65535" 1 465 "sint8" `189 
v L "??65535" 1 465 "sint8" `193 
f G "_mul" 1 465 "sint16(sint8 ,sint8 )" `191 
v L "??65535" 1 466 "int16" `189 
v L "??65535" 1 466 "int16" `196 
f G "_mul" 1 466 "int32(int16 ,int16 )" `194 
v L "??65535" 1 467 "sint16" `189 
v L "??65535" 1 467 "sint16" `199 
f B "_mul" 1 467 "sint32(sint16 ,sint16 ,int32 pins,int32 reference)" `197  "Memory Manipulation Prototypes:"
v L "bank" 1 470 "int8" `201 
v L "offset" 1 470 "int8" `202 
f B "read_bank" 1 470 "int8(int8 bank,int8 offset,int8 channel)" `200 
v L "bank" 1 471 "int8" `204 
v L "offset" 1 471 "int8" `205 
v L "value" 1 471 "int8" `206 
f B "write_bank" 1 471 "void(int8 bank,int8 offset,int8 value,sint16 x)" `203 
v L "dest" 1 472 "*int8" `208 
v L "src" 1 472 "*int8" `209 
f B "strcpy" 1 472 "void(*int8 dest,*int8 src)" `207 
v L "dest" 1 473 "*int8" `211 
v L "src" 1 473 "*int8" `212 
f B "strcopy" 1 473 "void(*int8 dest,*int8 src,int8 ,int8 )" `210 
v L "destination" 1 474 "*int8" `214 
v L "value" 1 474 "int8" `215 
v L "num" 1 474 "int16" `216 
f B "memset" 1 474 "void(*int8 destination,int8 value,int16 num,sint8 )" `213 
v L "destination" 1 475 "*int8" `218 
v L "source" 1 475 "*int8" `219 
v L "num" 1 475 "int16" `220 
f B "memcpy" 1 475 "void(*int8 destination,*int8 source,int16 num)" `217  "String Prototypes:"
v L "cvalue" 1 478 "int8" `222 
f B "toupper" 1 478 "int8(int8 cvalue,sint16 )" `221 
v L "cvalue" 1 479 "int8" `224 
f B "tolower" 1 479 "int8(int8 cvalue,int8 bank,int8 offset)" `223 
v L "string" 1 480 "*int8" `226 
v L "cstring" 1 480 "*int8" `227 
f B "sprintf" 1 480 "void(*int8 string,*int8 cstring,*int8 _VA_LIST,int8 offset,int8 PIN_C2)" `225  "Data Manipulators Prototypes:"
v L "address" 1 483 "*int8" `230 
v L "bytes" 1 483 "int8" `231 
v L "value" 1 483 "int8" `232 
f B "shift_left" 1 483 "int8(*int8 address,int8 bytes,int8 value,*int8 src)" `229 
v L "address" 1 484 "*int8" `234 
v L "bytes" 1 484 "int8" `235 
v L "value" 1 484 "int8" `236 
f B "shift_right" 1 484 "int8(*int8 address,int8 bytes,int8 value)" `233 
v L "address" 1 485 "*int8" `238 
v L "bytes" 1 485 "int8" `239 
f B "rotate_left" 1 485 "void(*int8 address,int8 bytes,int16 num)" `237 
v L "address" 1 486 "*int8" `241 
v L "bytes" 1 486 "int8" `242 
f B "rotate_right" 1 486 "void(*int8 address,int8 bytes,*int8 source,int16 num)" `240 
v L "value" 1 487 "int8" `244 
f B "swap" 1 487 "void(int8 value)" `243 
v L "var" 1 488 "int16" `246 
v L "offset" 1 488 "int8" `247 
f B "make8" 1 488 "int8(int16 var,int8 offset,int8 cvalue)" `245 
v L "var" 1 489 "int32" `246 
v L "offset" 1 489 "int8" `250 
f G "make8" 1 489 "int8(int32 var,int8 offset,*int8 cstring,*int8 _VA_LIST)" `248 
v L "varhigh" 1 490 "int8" `252 
v L "varlow" 1 490 "int8" `253 
f B "make16" 1 490 "int16(int8 varhigh,int8 varlow,*int8 address,int8 bytes,int8 PIN_C2)" `251 
v L "var1" 1 491 "int16" `255 
f B "make32" 1 491 "int32(int16 var1,int8 PIN_C2)" `254 
v L "var1" 1 492 "int16" `257 
v L "var2" 1 492 "int16" `258 
f G "make32" 1 492 "int32(int16 var1,int16 var2,int8 bytes,int8 PIN_C2)" `256 
v L "var1" 1 493 "int16" `257 
v L "var2" 1 493 "int8" `261 
f G "make32" 1 493 "int32(int16 var1,int8 var2,*int8 address,int8 bytes)" `259 
v L "var1" 1 494 "int16" `263 
v L "var2" 1 494 "int8" `264 
v L "var3" 1 494 "int8" `265 
f G "make32" 1 494 "int32(int16 var1,int8 var2,int8 var3,int8 bytes)" `262 
v L "var1" 1 495 "int8" `267 
f G "make32" 1 495 "int32(int8 var1,int8 PIN_C2)" `266 
v L "var1" 1 496 "int8" `257 
v L "var2" 1 496 "int8" `270 
f G "make32" 1 496 "int32(int8 var1,int8 var2,int8 offset)" `268 
v L "var1" 1 497 "int8" `263 
v L "var2" 1 497 "int8" `264 
v L "var3" 1 497 "int8" `274 
f G "make32" 1 497 "int32(int8 var1,int8 var2,int8 var3)" `271 
v L "var1" 1 498 "int8" `276 
v L "var2" 1 498 "int8" `277 
v L "var3" 1 498 "int8" `278 
v L "var4" 1 498 "int8" `279 
f B "make32" 1 498 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `275 
v L "var1" 1 499 "int8" `257 
v L "var2" 1 499 "int16" `282 
f G "make32" 1 499 "int32(int8 var1,int16 var2)" `280 
v L "var1" 1 500 "int8" `263 
v L "var2" 1 500 "int16" `264 
v L "var3" 1 500 "int8" `286 
f G "make32" 1 500 "int32(int8 var1,int16 var2,int8 var3,int16 var1,int8 var2,int8 var3)" `283 
v L "var1" 1 501 "int8" `263 
v L "var2" 1 501 "int8" `264 
v L "var3" 1 501 "int16" `290 
f G "make32" 1 501 "int32(int8 var1,int8 var2,int16 var3,int8 var1)" `287 
v L "var" 1 502 "int8" `292 
v L "bit" 1 502 "int8" `293 
f B "bit_set" 1 502 "void(int8 var,int8 bit,int8 var2)" `291 
v L "var" 1 503 "int16" `292 
v L "bit" 1 503 "int8" `296 
f G "bit_set" 1 503 "void(int16 var,int8 bit,int8 var2,int8 var3)" `294 
v L "var" 1 504 "int32" `292 
v L "bit" 1 504 "int8" `299 
f G "bit_set" 1 504 "void(int32 var,int8 bit,int8 var1,int8 var2,int8 var3,int8 var4)" `297 
v L "var" 1 505 "int8" `301 
v L "bit" 1 505 "int8" `302 
f B "bit_clear" 1 505 "void(int8 var,int8 bit,int8 var4)" `300 
v L "var" 1 506 "int16" `301 
v L "bit" 1 506 "int8" `305 
f G "bit_clear" 1 506 "void(int16 var,int8 bit,int16 var2)" `303 
v L "var" 1 507 "int32" `301 
v L "bit" 1 507 "int8" `308 
f G "bit_clear" 1 507 "void(int32 var,int8 bit,int16 var2,int8 var3)" `306 
v L "var" 1 508 "int8" `310 
v L "bit" 1 508 "int8" `311 
f B "bit_test" 1 508 "int8(int8 var,int8 bit,int8 var1,int8 var2,int16 var3)" `309 
v L "var" 1 509 "int16" `310 
v L "bit" 1 509 "int8" `314 
f G "bit_test" 1 509 "int8(int16 var,int8 bit)" `312 
v L "var" 1 510 "int32" `310 
v L "bit" 1 510 "int8" `317 
f B "bit_test" 1 510 "int8(int32 var,int8 bit)" `315  "#use delay() Prototypes:"
v L "count" 1 513 "int8" `319 
f B "delay_cycles" 1 513 "void(int8 count,int8 bit)" `318 
v L "time" 1 514 "int16" `321 
f B "delay_ms" 1 514 "void(int16 time,int32 var,int8 bit)" `320 
v L "time" 1 515 "int16" `323 
f B "delay_us" 1 515 "void(int16 time)" `322  "#use rs232() Prototypes:"
v L "cdata" 1 518 "int8" `325 
f B "putchar" 1 518 "void(int8 cdata,int8 bit)" `324 
v L "cdata" 1 519 "int8" `327 
v L "stream" 1 519 "int8" `328 
f G "putchar" 1 519 "void(int8 cdata,int8 stream,int8 bit)" `326 
v L "string" 1 520 "*int8" `330 
f B "puts" 1 520 "void(*int8 string,int32 var,int8 bit)" `329 
v L "string" 1 521 "*int8" `332 
v L "stream" 1 521 "int8" `333 
f G "puts" 1 521 "void(*int8 string,int8 stream,int8 var,int8 bit)" `331 
f B "getch" 1 522 "int8(int8 bit)" `334 
v L "stream" 1 523 "int8" `336 
f G "getch" 1 523 "int8(int8 stream,int16 var,int8 bit)" `335 
v L "string" 1 524 "*int8" `338 
f B "gets" 1 524 "void(*int8 string)" `337 
v L "string" 1 525 "*int8" `340 
v L "stream" 1 525 "int8" `341 
f G "gets" 1 525 "void(*int8 string,int8 stream)" `339 
f B "kbhit" 1 526 "int8(int8 count)" `342 
v L "stream" 1 527 "int8" `344 
f G "kbhit" 1 527 "int8(int8 stream,int16 time)" `343 
v L "string" 1 528 "*int8" `346 
f B "printf" 1 528 "void(*int8 string,*int8 _VA_LIST)" `345 
v L "stream" 1 529 "int8" `349 
v L "string" 1 529 "*int8" `350 
f B "fprintf" 1 529 "void(int8 stream,*int8 string,*int8 _VA_LIST,int8 VREF_HIGH)" `348 
f B "putc_send" 1 530 "void()" `352 
v L "stream" 1 531 "int8" `354 
f B "fputc_send" 1 531 "void(int8 stream)" `353 
f B "rcv_buffer_full" 1 532 "int8(*int8 string,int8 VREF_HIGH)" `355 
v L "stream" 1 533 "int8" `357 
f G "rcv_buffer_full" 1 533 "int8(int8 stream)" `356 
f B "rcv_buffer_bytes" 1 534 "int16()" `358 
v L "stream" 1 535 "int8" `360 
f G "rcv_buffer_bytes" 1 535 "int16(int8 stream)" `359 
f B "tx_buffer_full" 1 536 "int8(*int8 string)" `361 
v L "stream" 1 537 "int8" `363 
f G "tx_buffer_full" 1 537 "int8(int8 stream,*int8 string,int8 VREF_HIGH)" `362 
f B "tx_buffer_bytes" 1 538 "int16(int8 VREF_HIGH)" `364 
v L "stream" 1 539 "int8" `366 
f G "tx_buffer_bytes" 1 539 "int16(int8 stream)" `365  "#use i2c() Prototypes:"
f B "i2c_read" 1 542 "int8(int8 VREF_HIGH)" `367 
v L "stream" 1 543 "int8" `369 
f G "i2c_read" 1 543 "int8(int8 stream,*int8 string,*int8 _VA_LIST)" `368 
v L "stream" 1 544 "int8" `371 
v L "ack" 1 544 "int8" `372 
f G "i2c_read" 1 544 "int8(int8 stream,int8 ack,int8 VREF_HIGH,*int8 string,*int8 _VA_LIST)" `370 
v L "data" 1 545 "int8" `374 
f B "i2c_write" 1 545 "int8(int8 data,*int8 _VA_LIST)" `373 
v L "stream" 1 546 "int8" `376 
v L "data" 1 546 "int8" `377 
f G "i2c_write" 1 546 "int8(int8 stream,int8 data,int8 VREF_HIGH)" `375 
f B "i2c_start" 1 547 "void()" `378 
v L "stream" 1 548 "int8" `380 
f B "i2c_start" 1 548 "void(int8 stream,int8 VREF_HIGH)" `379 
v L "stream" 1 549 "int8" `382 
v L "restart" 1 549 "int8" `383 
f G "i2c_start" 1 549 "void(int8 stream,int8 restart,int8 VREF_HIGH)" `381 
f B "i2c_stop" 1 550 "void()" `384 
v L "stream" 1 551 "int8" `386 
f B "i2c_stop" 1 551 "void(int8 stream,int8 VREF_HIGH)" `385 
f B "i2c_isr_state" 1 552 "int8()" `387 
v L "addr" 1 553 "int8" `389 
f B "i2c_slaveaddr" 1 553 "void(int8 addr,int8 VREF_HIGH)" `388 
v L "stream" 1 554 "int8" `391 
v L "addr" 1 554 "int8" `392 
f G "i2c_slaveaddr" 1 554 "void(int8 stream,int8 addr,int8 VREF_HIGH)" `390 
f B "i2c_poll" 1 555 "int8()" `393 
v L "stream" 1 556 "int8" `395 
f G "i2c_poll" 1 556 "int8(int8 stream,int8 ack)" `394 
v L "baud" 1 557 "int32" `397 
f B "i2c_init" 1 557 "void(int32 baud,int8 data)" `396 
v L "stream" 1 558 "int8" `399 
v L "baud" 1 558 "int32" `400 
f G "i2c_init" 1 558 "void(int8 stream,int32 baud,int8 data)" `398  "#use spi() Prototypes:"
f B "spi_xfer" 1 561 "int8()" `401 
f B "spi_xfer" 1 562 "int16()" `402 
f G "spi_xfer" 1 563 "int32(int8 VREF_HIGH)" `403 
v L "data" 1 564 "int8" `405 
f G "spi_xfer" 1 564 "int8(int8 data,int8 VREF_HIGH,int8 restart)" `404 
v L "data" 1 565 "int16" `407 
f G "spi_xfer" 1 565 "int16(int16 data)" `406 
v L "data" 1 566 "int32" `409 
f B "spi_xfer" 1 566 "int32(int32 data,int8 VREF_HIGH)" `408 
v L "stream" 1 567 "int8" `411 
v L "data" 1 567 "int8" `412 
f G "spi_xfer" 1 567 "int8(int8 stream,int8 data,int8 addr)" `410 
v L "stream" 1 568 "int8" `411 
v L "data" 1 568 "int16" `415 
f G "spi_xfer" 1 568 "int16(int8 stream,int16 data,int8 addr)" `413 
v L "stream" 1 569 "int8" `411 
v L "data" 1 569 "int32" `418 
f G "spi_xfer" 1 569 "int32(int8 stream,int32 data,int8 VREF_HIGH)" `416 
v L "stream" 1 570 "int8" `420 
v L "data" 1 570 "int8" `421 
v L "bits" 1 570 "int8" `422 
f G "spi_xfer" 1 570 "int8(int8 stream,int8 data,int8 bits,int8 VREF_HIGH,int32 VREF_LOW)" `419 
v L "stream" 1 571 "int8" `420 
v L "data" 1 571 "int16" `421 
v L "bits" 1 571 "int8" `426 
f G "spi_xfer" 1 571 "int16(int8 stream,int16 data,int8 bits)" `423 
v L "stream" 1 572 "int8" `420 
v L "data" 1 572 "int32" `421 
v L "bits" 1 572 "int8" `430 
f G "spi_xfer" 1 572 "int32(int8 stream,int32 data,int8 bits,int16 data)" `427 
v L "baud" 1 573 "int32" `432 
f B "spi_init" 1 573 "void(int32 baud,int32 data)" `431 
v L "stream" 1 574 "int8" `434 
v L "baud" 1 574 "int32" `435 
f G "spi_init" 1 574 "void(int8 stream,int32 baud,int8 data)" `433 
v L "baud" 1 575 "int32" `437 
f B "spi_speed" 1 575 "void(int32 baud,int8 VREF_HIGH,int16 data)" `436 
v L "stream" 1 576 "int8" `439 
v L "baud" 1 576 "int32" `440 
f G "spi_speed" 1 576 "void(int8 stream,int32 baud,int8 VREF_HIGH,int32 data)" `438 
v L "stream" 1 577 "int8" `442 
v L "baud" 1 577 "int32" `443 
v L "clock" 1 577 "int32" `444 
f G "spi_speed" 1 577 "void(int8 stream,int32 baud,int32 clock,int8 data,int8 bits)" `441 
v L "data" 1 578 "int8" `446 
f B "spi_prewrite" 1 578 "void(int8 data)" `445 
v L "data" 1 579 "int16" `448 
f G "spi_prewrite" 1 579 "void(int16 data,int16 data,int8 bits)" `447 
v L "data" 1 580 "int32" `450 
f G "spi_prewrite" 1 580 "void(int32 data)" `449 
v L "??65535" 1 581 "int8" `452 
v L "data" 1 581 "int8" `453 
f G "spi_prewrite" 1 581 "void(int8 ,int8 data,int8 bits)" `451 
v L "??65535" 1 582 "int8" `452 
v L "data" 1 582 "int16" `456 
f G "spi_prewrite" 1 582 "void(int8 ,int16 data)" `454 
v L "??65535" 1 583 "int8" `452 
v L "data" 1 583 "int32" `459 
f G "spi_prewrite" 1 583 "void(int8 ,int32 data)" `457 
f B "spi_xfer_in" 1 584 "int8(int32 VREF_LOW)" `460 
f G "spi_xfer_in" 1 585 "int16()" `461 
f G "spi_xfer_in" 1 586 "int32(int8 VREF_HIGH,int32 VREF_LOW)" `462 
v L "bits" 1 587 "int8" `464 
f G "spi_xfer_in" 1 587 "int8(int8 bits)" `463 
v L "bits" 1 588 "int8" `466 
f G "spi_xfer_in" 1 588 "int16(int8 bits,int32 VREF_LOW,int32 VREF_6th)" `465 
v L "bits" 1 589 "int8" `468 
f G "spi_xfer_in" 1 589 "int32(int8 bits)" `467 
v L "stream" 1 590 "int8" `470 
v L "bits" 1 590 "int8" `471 
f B "spi_xfer_in" 1 590 "int8(int8 stream,int8 bits,int16 data)" `469 
v L "stream" 1 591 "int8" `470 
v L "bits" 1 591 "int8" `474 
f G "spi_xfer_in" 1 591 "int16(int8 stream,int8 bits)" `472 
v L "stream" 1 592 "int8" `470 
v L "bits" 1 592 "int8" `477 
f G "spi_xfer_in" 1 592 "int32(int8 stream,int8 bits)" `475  "#use rtos() Prototypes:"
f B "rtos_run" 1 595 "void(int8 ,int16 data)" `478 
f B "rtos_yield" 1 596 "void(int16 data)" `479 
v L "task" 1 597 "int8" `481 
f B "rtos_enable" 1 597 "void(int8 task,int8 ,int32 data)" `480 
v L "task" 1 598 "int8" `483 
f B "rtos_disable" 1 598 "void(int8 task)" `482 
f B "rtos_terminate" 1 599 "void()" `484 
v L "flag" 1 600 "int8" `486 
f B "rtos_await" 1 600 "void(int8 flag)" `485 
v L "sem" 1 601 "int8" `488 
f B "rtos_wait" 1 601 "void(int8 sem)" `487 
v L "sem" 1 602 "int8" `490 
f B "rtos_signal" 1 602 "void(int8 sem)" `489 
v L "task" 1 603 "int8" `492 
v L "msg" 1 603 "int8" `493 
f B "rtos_msg_send" 1 603 "void(int8 task,int8 msg,int8 VREF_HIGH,int8 bits)" `491 
f B "rtos_msg_read" 1 604 "int8(int8 bits)" `494 
f B "rtos_msg_poll" 1 605 "int8()" `495 
v L "task" 1 606 "int8" `497 
f B "rtos_overrun" 1 606 "int8(int8 task,int8 bits)" `496 
v L "task" 1 607 "int8" `499 
v L "stat" 1 607 "*int8" `500 
f B "rtos_stats" 1 607 "void(int8 task,*int8 stat,int8 bits)" `498  "#use timer() Prototypes:"
f B "get_ticks" 1 610 "int8()" `501 
f B "get_ticks" 1 611 "int16()" `502 
f B "get_ticks" 1 612 "int32()" `503 
v L "stream" 1 613 "int8" `505 
f B "get_ticks" 1 613 "int8(int8 stream)" `504 
v L "stream" 1 614 "int8" `507 
f B "get_ticks" 1 614 "int16(int8 stream)" `506 
v L "stream" 1 615 "int8" `509 
f B "get_ticks" 1 615 "int32(int8 stream,int8 flag)" `508 
v L "value" 1 616 "int8" `511 
f B "set_ticks" 1 616 "void(int8 value,int8 sem)" `510 
v L "value" 1 617 "int16" `513 
f G "set_ticks" 1 617 "void(int16 value,int8 sem)" `512 
v L "value" 1 618 "int32" `515 
f G "set_ticks" 1 618 "void(int32 value,int8 task,int8 msg)" `514 
v L "stream" 1 619 "int8" `517 
v L "value" 1 619 "int8" `518 
f G "set_ticks" 1 619 "void(int8 stream,int8 value)" `516 
v L "stream" 1 620 "int8" `517 
v L "value" 1 620 "int16" `521 
f B "set_ticks" 1 620 "void(int8 stream,int16 value)" `519 
v L "stream" 1 621 "int8" `517 
v L "value" 1 621 "int32" `524 
f B "set_ticks" 1 621 "void(int8 stream,int32 value)" `522  "#use pwm() Prototypes:"
f B "pwm_on" 1 624 "void()" `525 
v L "stream" 1 625 "int8" `527 
f G "pwm_on" 1 625 "void(int8 stream)" `526 
f B "pwm_off" 1 626 "void(int8 VREF_HIGH)" `528 
v L "stream" 1 627 "int8" `530 
f G "pwm_off" 1 627 "void(int8 stream,int8 VREF_HIGH)" `529 
v L "duty" 1 628 "int16" `532 
f B "pwm_set_duty" 1 628 "void(int16 duty,int8 VREF_HIGH)" `531 
v L "stream" 1 629 "int8" `534 
v L "duty" 1 629 "int16" `535 
f G "pwm_set_duty" 1 629 "void(int8 stream,int16 duty)" `533 
v L "percent" 1 630 "int16" `537 
f B "pwm_set_duty_percent" 1 630 "void(int16 percent)" `536 
v L "stream" 1 631 "int8" `539 
v L "percent" 1 631 "int16" `540 
f G "pwm_set_duty_percent" 1 631 "void(int8 stream,int16 percent,int8 VREF_HIGH,int8 PIN_C2)" `538 
v L "frequency" 1 632 "int32" `542 
f B "pwm_set_frequency" 1 632 "void(int32 frequency)" `541 
v L "stream" 1 633 "int8" `544 
v L "frequency" 1 633 "int32" `545 
f G "pwm_set_frequency" 1 633 "void(int8 stream,int32 frequency)" `543  "#use capture() Prototypes:"
f B "get_capture_time" 1 636 "int16(int8 VREF_HIGH,int32 PIN_C2)" `546 
v L "stream" 1 637 "int8" `548 
f G "get_capture_time" 1 637 "int16(int8 stream)" `547 
f B "get_capture_event" 1 638 "int8()" `549 
v L "stream" 1 639 "int8" `551 
f G "get_capture_event" 1 639 "int8(int8 stream)" `550  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
v L "address" 1 652 "int16" `553 
f B "goto_address" 1 652 "void(int16 address,int8 VREF_HIGH)" `552 
v L "label" 1 653 "int16" `555 
f B "label_address" 1 653 "int16(int16 label,int16 duty)" `554  "Program Memory Prototypes:"
v L "address" 1 656 "int16" `557 
v L "dataptr" 1 656 "*int8" `558 
v L "count" 1 656 "int16" `559 
f B "read_program_memory" 1 656 "void(int16 address,*int8 dataptr,int16 count)" `556 
v L "address" 1 657 "int16" `561 
f B "read_program_eeprom" 1 657 "int16(int16 address)" `560  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 661 "int16" `562 
v L "address" 1 666 "__EEADDRESS__" `564 
f B "read_eeprom" 1 666 "int8(__EEADDRESS__ address)" `563 
v L "address" 1 667 "__EEADDRESS__" `566 
v L "value" 1 667 "int8" `567 
f B "write_eeprom" 1 667 "void(__EEADDRESS__ address,int8 value,int8 VREF_HIGH,int32 frequency)" `565  "INT"
c L "write_eeprom" 1 3 4 "FUNCTION"
v L "interrupt" 1 674 "int32" `569 
f B "enable_interrupts" 1 674 "void(int32 interrupt)" `568 
v L "interrupt" 1 675 "int32" `571 
f B "disable_interrupts" 1 675 "void(int32 interrupt,int8 VREF_HIGH)" `570 
v L "interrupt" 1 676 "int32" `573 
f B "clear_interrupt" 1 676 "void(int32 interrupt)" `572 
v L "interrupt" 1 677 "int32" `575 
f B "interrupt_active" 1 677 "int8(int32 interrupt)" `574 
v L "interrupt" 1 678 "int32" `577 
f B "interrupt_enabled" 1 678 "int8(int32 interrupt)" `576 
v L "source" 1 679 "int8" `579 
v L "edge" 1 679 "int8" `580 
f B "ext_int_edge" 1 679 "void(int8 source,int8 edge,int16 i2c_poll,*int8 dataptr,int16 rtos_enable)" `578 
v L "address" 1 680 "int16" `582 
f B "jump_to_irs" 1 680 "void(int16 address,int16 rtos_enable)" `581  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 682 "0x40"
d G "H_TO_L" 1 683 "0"
d G "GLOBAL" 1 685 "0x0BC0"
d G "PERIPH" 1 686 "0x0B40"
d G "INT_RTCC" 1 687 "0x000B20"
d G "INT_EXT_L2H" 1 688 "0x50000B10"
d G "INT_EXT_H2L" 1 689 "0x60000B10"
d G "INT_EXT" 1 690 "0x000B10"
d G "INT_AD" 1 691 "0x008C40"
d G "INT_TBE" 1 692 "0x008C10"
d G "INT_RDA" 1 693 "0x008C20"
d G "INT_TIMER1" 1 694 "0x008C01"
d G "INT_TIMER2" 1 695 "0x008C02"
d G "INT_CCP1" 1 696 "0x008C04"
d G "INT_SSP" 1 697 "0x008C08"
d G "INT_EEPROM" 1 698 "0x008D10"
d G "INT_TIMER0" 1 699 "0x000B20"
d G "INT_OSC_FAIL" 1 700 "0x008D80"
d G "INT_COMP" 1 701 "0x008D20"
d G "INT_COMP2" 1 702 "0x008D40"
d G "INT_RA" 1 703 "0x00FF0B08"
d G "INT_RB" 1 704 "0x21FF0B08"
d G "INT_RAB" 1 705 "0x02FF0B08"
d G "INT_RA0" 1 706 "0x0010B08"
d G "INT_RA1" 1 707 "0x0020B08"
d G "INT_RA2" 1 708 "0x0040B08"
d G "INT_RA3" 1 709 "0x0080B08"
d G "INT_RA4" 1 710 "0x0100B08"
d G "INT_RA5" 1 711 "0x0200B08"
d G "INT_RB4" 1 712 "0x1100B08"
d G "INT_RB5" 1 713 "0x1200B08"
d G "INT_RB6" 1 714 "0x1400B08"
d G "INT_RB7" 1 715 "0x1800B08"
V G "soXung" 0 5 "int16" `590 
V G "tanSoSoSanh" 0 5 "int16" `591 
V G "tanSo" 0 5 "int16" `592 
V G "tong" 0 6 "int32" `593 
V G "dem" 0 7 "int8" `594 
V G "demDLTS" 0 7 "int8" `595 
V G "enaBuzzer" 0 8 "int1" `596 
V G "enaDLTS" 0 8 "int1" `597 
D G "BUZZER" 0 9 "pin_c7"
D G "SIGNAL" 0 10 "pin_c5"
F B "ngat_dem_xung" 0 16 "void(demDLTS i2c_poll,int8 PIN_C2)" `598 
F G "ngat1" 0 21 "void(int8 PIN_C2)" `599 
C L "ngat1" 0 33 1 "FUNCTION"
F G "MAIN" 0 62 "void()" `608 
C L "MAIN" 0 33 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep_ulpwu" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
